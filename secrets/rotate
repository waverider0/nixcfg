#!/usr/bin/env nix-shell
#! nix-shell -i bash -p age
set -euo pipefail
shopt -s dotglob nullglob

BASE_DIR="$(cd "$(dirname "$0")" && pwd)"
TMP_DIR="$(mktemp -d "$(dirname "$BASE_DIR")/tmp.XXXXXXXX")"
NEW_DIR="$TMP_DIR/secrets.new"
trap 'rm -rf "$TMP_DIR"' EXIT

is_secret() {
    local f="$1"
    case "$f" in
        id|rotate|ssh_config|*.nix|*.pub) return 1 ;;
        *) return 0 ;;
    esac
}

# generate new keypair
age-keygen -o "$TMP_DIR/id.new"
age-keygen -y "$TMP_DIR/id.new" > "$TMP_DIR/id.pub.new"
until age --encrypt --passphrase --armor -o "$TMP_DIR/id.new.enc" "$TMP_DIR/id.new"; do :; done

# prepare new directory
mkdir -p "$NEW_DIR"
for src in "$BASE_DIR"/* "$BASE_DIR"/.*; do
    name=${src##*/}
    [[ -e $src ]] || continue
    if ! is_secret "$name"; then cp -a "$src" "$NEW_DIR/"; fi
done
mv "$TMP_DIR/id.new.enc" "$NEW_DIR/id"
mv "$TMP_DIR/id.pub.new" "$NEW_DIR/id.pub"
chmod 600 "$NEW_DIR/id" "$NEW_DIR/id.pub"

if [[ -f "$BASE_DIR/id" ]]; then
    # rotate
    echo "Enter passphrase for existing private key:" >&2
    age --decrypt < "$BASE_DIR/id" > "$TMP_DIR/old.key"
    for src in "$BASE_DIR"/*; do
        name=${src##*/}
        is_secret "$name" || continue
        if [[ "$name" == *.age ]]; then
            # re-encrypt existing secrets
            base=${name%.age}
            age --decrypt -i "$TMP_DIR/old.key" < "$src" | age --encrypt -r "$(cat "$NEW_DIR/id.pub")" --armor > "$NEW_DIR/$base.age"
        else
            # encrypt new secrets
            age --encrypt -r "$(cat "$NEW_DIR/id.pub")" --armor < "$src" > "$NEW_DIR/${name}.age"
        fi
    done
else
    # first-time setup
    for src in "$BASE_DIR"/*; do
        name=${src##*/}
        is_secret "$name" || continue
        age --encrypt -r "$(cat "$NEW_DIR/id.pub")" --armor < "$src" > "$NEW_DIR/${name}.age"
    done
fi

# atomic replacement
mv "$BASE_DIR" "$BASE_DIR.bak"
mv "$NEW_DIR" "$BASE_DIR"
rm -rf "$BASE_DIR.bak"
